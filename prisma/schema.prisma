// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  role      String   @default("member") // admin, member
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  familyId String?
  family   Family? @relation(fields: [familyId], references: [id])
  
  expenses Expense[]
  wallets  Wallet[]
  tasks    Task[]
  
  @@map("users")
}

model Family {
  id        String   @id @default(cuid())
  name      String
  adminId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  members     User[]
  expenses    Expense[]
  categories  Category[]
  wallets     Wallet[]
  shoppingItems ShoppingItem[]
  tasks       Task[]
  devices     Device[]

  @@map("families")
}

model Category {
  id        String   @id @default(cuid())
  name      String
  color     String   @default("#007A33")
  icon      String   @default("ðŸ’°")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  familyId String
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)
  expenses Expense[]

  @@map("categories")
}

model Expense {
  id          String   @id @default(cuid())
  description String
  amount      Float
  date        DateTime @default(now())
  type        String   @default("expense") // expense, income
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  familyId   String
  family     Family   @relation(fields: [familyId], references: [id], onDelete: Cascade)
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  @@map("expenses")
}

model Wallet {
  id        String   @id @default(cuid())
  name      String
  balance   Float    @default(0)
  color     String   @default("#007A33")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  userId   String
  user     User   @relation(fields: [userId], references: [id])
  familyId String
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@map("wallets")
}

model ShoppingItem {
  id        String   @id @default(cuid())
  name      String
  quantity  Int      @default(1)
  price     Float?
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  familyId String
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@map("shopping_items")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  completed   Boolean  @default(false)
  priority    String   @default("medium") // low, medium, high
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  assignedToId String?
  assignedTo   User?   @relation(fields: [assignedToId], references: [id])
  familyId     String
  family       Family  @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Device {
  id            String   @id @default(cuid())
  deviceId      String   @unique // ID Ãºnico do dispositivo (MAC, etc)
  name          String
  type          String   // light, thermostat, switch, sensor
  room          String
  status        String   @default("offline") // online, offline
  isOn          Boolean  @default(false)
  value         Float?   // brightness, temperature, etc
  maxValue      Float?
  unit          String?  // %, Â°C, etc
  ip            String?
  mac           String?
  wifiRssi      Int?
  version       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relacionamentos
  familyId String
  family   Family @relation(fields: [familyId], references: [id], onDelete: Cascade)

  @@map("devices")
}

model Log {
  id        String   @id @default(cuid())
  level     String   // info, warning, error
  message   String
  data      Json?
  createdAt DateTime @default(now())

  @@map("logs")
}
