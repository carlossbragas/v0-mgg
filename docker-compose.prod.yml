version: '3.8'

services:
  # Aplicação Next.js para produção
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/minhagrana?schema=public
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/minhagrana?schema=public
      - NEXT_PUBLIC_API_BASE_URL=${NEXT_PUBLIC_API_BASE_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL}
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - minhagrana-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Banco de dados PostgreSQL para produção
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: minhagrana
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./prisma/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d minhagrana"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - minhagrana-network
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Nginx como proxy reverso (opcional para produção)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    networks:
      - minhagrana-network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  minhagrana-network:
    driver: bridge
